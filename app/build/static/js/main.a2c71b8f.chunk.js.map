{"version":3,"sources":["redux/actions/commentsActions.tsx","redux/reducers/commentsReducer.ts","redux/actions/imagesActions.tsx","redux/reducers/imagesReducer.ts","redux/actions/postsActions.tsx","redux/reducers/postsReducer.ts","redux/reducers/index.ts","redux/index.ts","components/ImagesButton.tsx","components/ImagesGrid.tsx","components/PostList.tsx","components/PostsButton.tsx","components/Interface.tsx","App.tsx","index.tsx"],"names":["SET_COMMENTS","initialState","postId","comments","commentsReducer","state","action","type","payload","SET_IMAGES","images","imagesReducer","SET_POSTS","posts","postsReducer","combineReducers","store","createStore","reducers","connect","setImages","setCurrentView","a","fetch","req","json","onClick","getImages","Container","styled","div","map","id","url","src","setComments","handleClick","useCallback","getComments","title","disabled","c","setPosts","getPosts","InterfaceContainer","Interface","useState","currentView","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2c71b8f.chunk.js","sourcesContent":["import { IComment } from \"../../global\";\n\nexport type PossibleActions = {\n  type: \"SET_COMMENTS\";\n  payload: { comments: IComment[]; postId: number };\n};\n\nexport const SET_COMMENTS = \"SET_COMMENTS\";\n\nexport type TSetComments = (\n  posts: IComment[],\n  postId: number\n) => {\n  type: \"SET_COMMENTS\";\n  payload: { comments: IComment[]; postId: number };\n};\n\nexport const setComments: TSetComments = (comments, postId) => {\n  return {\n    type: \"SET_COMMENTS\",\n    payload: { comments, postId },\n  };\n};\n","import { ICommentsState } from \"../../global\";\nimport { SET_COMMENTS, PossibleActions } from \"../actions/commentsActions\";\n\nconst initialState: ICommentsState = {\n  postId: null,\n  comments: [],\n};\n\nfunction commentsReducer(state = initialState, action: PossibleActions) {\n  switch (action.type) {\n    case SET_COMMENTS:\n      return {\n        ...state,\n        postId: action.payload.postId,\n        comments: [...action.payload.comments],\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\nexport default commentsReducer;\n","import { IImage } from \"../../global\";\n\nexport type PossibleActions = {\n  type: \"SET_IMAGES\";\n  payload: IImage[];\n};\n\nexport const SET_IMAGES = \"SET_IMAGES\";\n\nexport type TSetImages = (\n  images: IImage[]\n) => {\n  type: \"SET_IMAGES\";\n  payload: IImage[];\n};\n\nexport const setImages: TSetImages = (images) => {\n  return {\n    type: \"SET_IMAGES\",\n    payload: images,\n  };\n};\n","import { IImagesState } from \"../../global\";\nimport { SET_IMAGES, PossibleActions } from \"../actions/imagesActions\";\n\nconst initialState: IImagesState = {\n  images: [],\n};\n\nfunction imagesReducer(state = initialState, action: PossibleActions) {\n  switch (action.type) {\n    case SET_IMAGES:\n      return {\n        ...state,\n        images: [...action.payload],\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\nexport default imagesReducer;\n","import { IPost } from \"../../global\";\n\nexport type PossibleActions = { type: \"SET_POSTS\"; payload: IPost[] };\n\nexport const SET_POSTS = \"SET_POSTS\";\n\nexport type TSetPosts = (\n  posts: IPost[]\n) => { type: \"SET_POSTS\"; payload: IPost[] };\n\nexport const setPosts: TSetPosts = (posts) => {\n  return {\n    type: \"SET_POSTS\",\n    payload: posts,\n  };\n};\n","import { IPostsState } from \"../../global\";\nimport { SET_POSTS, PossibleActions } from \"../actions/postsActions\";\n\nconst initialState: IPostsState = {\n  posts: [],\n};\n\nfunction postsReducer(state = initialState, action: PossibleActions) {\n  switch (action.type) {\n    case SET_POSTS:\n      return {\n        ...state,\n        posts: [...action.payload],\n      };\n\n    default:\n      return {\n        ...state,\n      };\n  }\n}\nexport default postsReducer;\n","import { combineReducers } from \"redux\";\n\nimport comments from \"./commentsReducer\";\nimport images from \"./imagesReducer\";\nimport posts from \"./postsReducer\";\n\nexport default combineReducers({\n  comments,\n  images,\n  posts,\n});\n","import { createStore } from \"redux\";\n\nimport reducers from \"./reducers\";\n\nconst initialState = {};\n\nconst store = createStore(reducers, initialState);\n\nexport default store;\n","import { Dispatch, SetStateAction } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IImage } from \"../global\";\nimport { setImages, TSetImages } from \"../redux/actions/imagesActions\";\n\ninterface IProps {\n  setCurrentView: Dispatch<SetStateAction<\"\" | \"posts\" | \"images\">>;\n  setImages: TSetImages;\n}\n\nfunction ImagesButton({ setCurrentView, setImages }: IProps) {\n  function handleClick() {\n    setCurrentView(\"images\");\n\n    getImages();\n  }\n\n  async function getImages() {\n    const req = await fetch(\"/images\");\n    const images: IImage[] = await req.json();\n\n    setImages(images);\n  }\n\n  return <button onClick={handleClick}>Get Pictures</button>;\n}\n\nexport default connect(null, { setImages })(ImagesButton);\n","import { connect } from \"react-redux\";\nimport { IGlobalState, IImage } from \"../global\";\n\nimport styled from \"styled-components\";\n\ninterface IProps {\n  images: IImage[];\n}\n\nconst Container = styled.div`\n  align-items: center;\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  justify-content: center;\n  width: 50vw;\n\n  img {\n    height: auto;\n    width: 100%;\n  }\n`;\n\nfunction ImagesGrid({ images }: IProps) {\n  return (\n    <Container>\n      {images.map(({ id, url }) => (\n        <img src={url} key={id} />\n      ))}\n    </Container>\n  );\n}\n\nconst mapStateToProps = ({ images }: IGlobalState) => {\n  return {\n    images: images.images,\n  };\n};\n\nexport default connect(mapStateToProps)(ImagesGrid);\n","import { useCallback } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IGlobalState, IPost, IComment } from \"../global\";\n\nimport { setComments, TSetComments } from \"../redux/actions/commentsActions\";\n\ninterface IProps {\n  comments: IComment[];\n  posts: IPost[];\n  postId: number | null;\n  setComments: TSetComments;\n}\n\nfunction PostList({ comments, postId, posts, setComments }: IProps) {\n  const handleClick = useCallback(async (id: number) => {\n    const comments = await getComments(id);\n\n    setComments(comments, id);\n  }, []);\n\n  async function getComments(id: number) {\n    const req = await fetch(`/comments/${id}`);\n    const comments: { comments: IComment[] } = await req.json();\n\n    return comments.comments;\n  }\n\n  return (\n    <div>\n      {posts &&\n        posts.map(({ id, title }) => {\n          return (\n            <div>\n              <p>{title}</p>\n              <button onClick={() => handleClick(id)} disabled={postId === id}>\n                Show Comments\n              </button>\n              {postId === id && (\n                <div>\n                  {comments.map((c) => (\n                    <p>{c}</p>\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n\nconst mapStateToProps = ({ comments, posts: { posts } }: IGlobalState) => ({\n  comments: comments.comments,\n  postId: comments.postId,\n  posts,\n});\n\nexport default connect(mapStateToProps, { setComments })(PostList);\n","import { Dispatch, SetStateAction } from \"react\";\nimport { connect } from \"react-redux\";\nimport { IPost } from \"../global\";\n\nimport { setPosts, TSetPosts } from \"../redux/actions/postsActions\";\n\ninterface IProps {\n  setCurrentView: Dispatch<SetStateAction<\"\" | \"posts\" | \"images\">>;\n  setPosts: TSetPosts;\n}\n\nfunction PostsButton({ setCurrentView, setPosts }: IProps) {\n  function handleClick() {\n    setCurrentView(\"posts\");\n\n    getPosts();\n  }\n\n  async function getPosts() {\n    const req = await fetch(\"/posts\");\n    const posts: IPost[] = await req.json();\n\n    setPosts(posts);\n  }\n\n  return <button onClick={handleClick}>Get Posts</button>;\n}\n\nexport default connect(null, { setPosts })(PostsButton);\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport ImagesButton from \"./ImagesButton\";\nimport ImagesGrid from \"./ImagesGrid\";\nimport PostList from \"./PostList\";\nimport PostsButton from \"./PostsButton\";\n\nconst InterfaceContainer = styled.div`\n  align-items: center;\n  display: flex;\n  flex-flow: column nowrap;\n  justify-content: center;\n`;\n\nfunction Interface() {\n  const [currentView, setCurrentView] = useState<\"posts\" | \"images\" | \"\">(\"\");\n\n  return (\n    <InterfaceContainer>\n      <div>\n        <PostsButton setCurrentView={setCurrentView} />\n        <ImagesButton setCurrentView={setCurrentView} />\n      </div>\n      {currentView === \"posts\" ? (\n        <PostList />\n      ) : currentView === \"images\" ? (\n        <ImagesGrid />\n      ) : (\n        <></>\n      )}\n    </InterfaceContainer>\n  );\n}\n\nexport default Interface;\n","import { Provider } from \"react-redux\";\n\nimport \"./styles/App.scss\";\n\nimport store from \"./redux\";\n\nimport Interface from \"./components/Interface\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Interface />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/index.scss\";\n\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}